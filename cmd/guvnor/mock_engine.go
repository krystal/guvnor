// Code generated by mockery v2.10.0. DO NOT EDIT.

package main

import (
	context "context"

	guvnor "github.com/krystal/guvnor"
	mock "github.com/stretchr/testify/mock"
)

// mockEngine is an autogenerated mock type for the engine type
type mockEngine struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: _a0, _a1
func (_m *mockEngine) Cleanup(_a0 context.Context, _a1 guvnor.CleanupArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, guvnor.CleanupArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deploy provides a mock function with given fields: _a0, _a1
func (_m *mockEngine) Deploy(_a0 context.Context, _a1 guvnor.DeployArgs) (*guvnor.DeployResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *guvnor.DeployResult
	if rf, ok := ret.Get(0).(func(context.Context, guvnor.DeployArgs) *guvnor.DeployResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guvnor.DeployResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, guvnor.DeployArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultService provides a mock function with given fields:
func (_m *mockEngine) GetDefaultService() (*guvnor.GetDefaultServiceResult, error) {
	ret := _m.Called()

	var r0 *guvnor.GetDefaultServiceResult
	if rf, ok := ret.Get(0).(func() *guvnor.GetDefaultServiceResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guvnor.GetDefaultServiceResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Purge provides a mock function with given fields: _a0
func (_m *mockEngine) Purge(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTask provides a mock function with given fields: _a0, _a1
func (_m *mockEngine) RunTask(_a0 context.Context, _a1 guvnor.RunTaskArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, guvnor.RunTaskArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *mockEngine) Status(_a0 context.Context, _a1 guvnor.StatusArgs) (*guvnor.StatusResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *guvnor.StatusResult
	if rf, ok := ret.Get(0).(func(context.Context, guvnor.StatusArgs) *guvnor.StatusResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guvnor.StatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, guvnor.StatusArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
