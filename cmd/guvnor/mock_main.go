// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	guvnor "github.com/krystal/guvnor"
)

// Mockengine is a mock of engine interface.
type Mockengine struct {
	ctrl     *gomock.Controller
	recorder *MockengineMockRecorder
}

// MockengineMockRecorder is the mock recorder for Mockengine.
type MockengineMockRecorder struct {
	mock *Mockengine
}

// NewMockengine creates a new mock instance.
func NewMockengine(ctrl *gomock.Controller) *Mockengine {
	mock := &Mockengine{ctrl: ctrl}
	mock.recorder = &MockengineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockengine) EXPECT() *MockengineMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *Mockengine) Cleanup(arg0 context.Context, arg1 guvnor.CleanupArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockengineMockRecorder) Cleanup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*Mockengine)(nil).Cleanup), arg0, arg1)
}

// Deploy mocks base method.
func (m *Mockengine) Deploy(arg0 context.Context, arg1 guvnor.DeployArgs) (*guvnor.DeployResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1)
	ret0, _ := ret[0].(*guvnor.DeployResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockengineMockRecorder) Deploy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*Mockengine)(nil).Deploy), arg0, arg1)
}

// GetDefaultService mocks base method.
func (m *Mockengine) GetDefaultService() (*guvnor.GetDefaultServiceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultService")
	ret0, _ := ret[0].(*guvnor.GetDefaultServiceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultService indicates an expected call of GetDefaultService.
func (mr *MockengineMockRecorder) GetDefaultService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultService", reflect.TypeOf((*Mockengine)(nil).GetDefaultService))
}

// Purge mocks base method.
func (m *Mockengine) Purge(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge.
func (mr *MockengineMockRecorder) Purge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*Mockengine)(nil).Purge), arg0)
}

// RunTask mocks base method.
func (m *Mockengine) RunTask(arg0 context.Context, arg1 guvnor.RunTaskArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask.
func (mr *MockengineMockRecorder) RunTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*Mockengine)(nil).RunTask), arg0, arg1)
}

// Status mocks base method.
func (m *Mockengine) Status(arg0 context.Context, arg1 guvnor.StatusArgs) (*guvnor.StatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*guvnor.StatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockengineMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*Mockengine)(nil).Status), arg0, arg1)
}
